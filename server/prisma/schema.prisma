// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id String @id @default(uuid())

  title     String
  content   String
  asfCoins  Int
  createdAt DateTime @default(now())

  option String //evento, ajuda, duvida, curiosidade

  comments Comment[]

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Comment {
  id String @id @default(uuid())

  content  String
  asfCoins Int
  createAt DateTime @default(now())

  post   Post   @relation(fields: [postId], references: [id])
  postId String

  replies         Comment[] @relation("Replies")
  parentComment   Comment?  @relation("Replies", fields: [parentCommentId], references: [id])
  parentCommentId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model User {
  id       String  @id @unique @default(uuid())
  isActive Boolean @default(true)

  name      String
  email     String @unique
  password  String
  asfCoins  Int
  promCoins Int

  registeredAt DateTime @default(now())

  posts     Post[]
  comments  Comment[]
  beeKeeper BeeKeeper?
}

model BeeKeeper {
  id       String  @id @default(uuid())
  isActive Boolean @default(true)

  state       String
  city        String
  phoneNumber String @unique
  RG          String @unique
  CPF         String @unique

  subscriptionAt DateTime @default(now())

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}
